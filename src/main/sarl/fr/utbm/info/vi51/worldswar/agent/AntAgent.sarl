package fr.utbm.info.vi51.worldswar.^agent

import fr.utbm.info.vi51.worldswar.^agent.^event.InfluenceEvent
import fr.utbm.info.vi51.worldswar.^agent.^event.KillAgentEvent
import fr.utbm.info.vi51.worldswar.^agent.^event.PerceptionEvent
import fr.utbm.info.vi51.worldswar.^agent.strategic_behaviour.StrategicBehaviour
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.Scopes
import java.util.HashMap
import io.sarl.core.Logging
import fr.utbm.info.vi51.worldswar.^agent.^event.AgentInitializedEvent

/**
 * Abstract agent inherited by every other ants agents
 */
agent AntAgent {
	uses Lifecycle, DefaultContextInteractions, Logging
	
	val memory : HashMap<String, Object> = new HashMap()
	var behaviour : StrategicBehaviour
	
	on Initialize{
		synchronized(this) {
			this.behaviour = occurrence.parameters.get(0) as StrategicBehaviour
			
			emit(new AgentInitializedEvent)
		}
	}
	
	on KillAgentEvent {
		synchronized(this) {
			killMe
		}
	}
	
	on PerceptionEvent {
		synchronized(this) {
			
			val perceptionGrid = occurrence.perceptionGrid
			if(behaviour !== null ){
				val influence = behaviour.computeInfluence(perceptionGrid, memory)
				emit(new InfluenceEvent(this.getID(), influence),
					Scopes.addresses(occurrence.callbackAddress))
			}else{
				error("ant agent does'nt have behaviour")
			}
			
		}
	}
}