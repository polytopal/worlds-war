package fr.utbm.info.vi51.worldswar.environment

import fr.utbm.info.vi51.worldswar.^agent.AntAgent
import fr.utbm.info.vi51.worldswar.^agent.BehaviourHandler
import fr.utbm.info.vi51.worldswar.^agent.^event.AgentInitializedEvent
import fr.utbm.info.vi51.worldswar.^agent.^event.InfluenceEvent
import fr.utbm.info.vi51.worldswar.^agent.^event.KillAgentEvent
import fr.utbm.info.vi51.worldswar.^agent.^event.PerceptionEvent
import fr.utbm.info.vi51.worldswar.controller.SimulationParameters
import fr.utbm.info.vi51.worldswar.environment.envobject.AgentBody
import fr.utbm.info.vi51.worldswar.environment.envobject.AntBody
import fr.utbm.info.vi51.worldswar.environment.envobject.AntHill
import fr.utbm.info.vi51.worldswar.environment.influence.DropFoodInfluence
import fr.utbm.info.vi51.worldswar.environment.influence.Influence
import fr.utbm.info.vi51.worldswar.environment.influence.MeleeAttackInfluence
import fr.utbm.info.vi51.worldswar.environment.influence.MoveInfluence
import fr.utbm.info.vi51.worldswar.environment.influence.PheromoneAndMoveInfluence
import fr.utbm.info.vi51.worldswar.environment.influence.PickFoodInfluence
import fr.utbm.info.vi51.worldswar.perception.AntPerception
import fr.utbm.info.vi51.worldswar.perception.PerceptionGrid
import fr.utbm.info.vi51.worldswar.perception.perceivable.PerceivableAnt
import fr.utbm.info.vi51.worldswar.simulator.SimulationStepEvent
import fr.utbm.info.vi51.worldswar.simulator.SimulatorListener
import fr.utbm.info.vi51.worldswar.simulator.StopSimulationEvent
import fr.utbm.info.vi51.worldswar.utils.Direction
import fr.utbm.info.vi51.worldswar.utils.Grid
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.util.Scopes
import java.awt.Point
import java.util.Collections
import java.util.HashMap
import java.util.LinkedList
import java.util.List
import java.util.UUID
import java.util.ArrayList
import java.util.concurrent.ConcurrentHashMap
import fr.utbm.info.vi51.worldswar.environment.influence.DoNothingInfluence

/**
 * While it does not appear obvious, this agent manages the environment.
 * */
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	val AGENTS_MAP_INITIAL_SIZE : int = 1500
	
	private var listeners : List<SimulatorListener>
	
	/** an object that create the behaviours */
	var behaviourHandler : BehaviourHandler
	
	var grid : Grid<EnvCell>
	var antHills : List<AntHill>

	var agentBodies : HashMap<UUID, AgentBody>

	/** List of the UUID of agents that have been spawned, but are not initialized yet */
	var uninitializedAgents : List<UUID>
	/** True if and only if the environment is waiting one or more agents to finish their initialization before finishing its step. */
	var waitingAgentsInitialization : boolean
	
	var agentInfluenceHashMap : ConcurrentHashMap<UUID, Influence>
	
	var perceptionGrid : PerceptionGrid

	on Initialize {
		synchronized(this) {
			var simParameters = occurrence.parameters.get(0) as SimulationParameters
			this.listeners = occurrence.parameters.get(1) as List<SimulatorListener>
			
			this.behaviourHandler = new BehaviourHandler
			
			this.grid = EnvironmentUtils.generateMap(simParameters)
			
			this.antHills = EnvironmentUtils.getAntHills(this.grid)
			
			
			info("Creating agents map...")
			this.agentBodies = new HashMap(AGENTS_MAP_INITIAL_SIZE)
			this.agentInfluenceHashMap = new ConcurrentHashMap(AGENTS_MAP_INITIAL_SIZE)
			info("Map created")

			this.uninitializedAgents = new LinkedList
			this.waitingAgentsInitialization = false
			
			val colonyMap = new ArrayList<Colony>()
			for(antHill : this.antHills) {
				colonyMap.add(antHill.colony)
			}
			
			var mapInfos = new MapInformation(simParameters.getNoiseSeed(), colonyMap)
			emit(new EnvironmentInitializedEvent(mapInfos))
		}
	}
	
	on StopSimulationEvent {
		synchronized(this) {
			info("Environment stopping")
			emit(new KillAgentEvent)
			killMe
		}
	}
	
	on Destroy {
		synchronized(this) {
			emit(new EnvironmentTerminatedEvent)
		}
	}
	
	on SimulationStepEvent {
		synchronized(this) {
			perceptionGrid = PerceptionGrid.buildFromEnvObjectGrid(grid)

			for(l : this.listeners) {
				l.environmentUpdated(perceptionGrid, this.agentBodies.size)
			}
			sendPerceptionsToAgents(perceptionGrid)
		}
	}
	
	/**
	 * Invoked when all influences have been received in the agentInfluenceHashMap.
	 * Performs the changes to the envObjects for this step.
	 * Once this is done, the environment is ready for a new step.
	 */
	
	private def applyStep {
		applyInfluences
		
		EnvironmentUtils.applyPheromoneDissipation(grid)
		antsAging
		spawnAntsInAntHills
		agentInfluenceHashMap.clear
		emit(new EnvironmentReadyEvent)
	}
	
	////////////////////////////////////////
	///            INFLUENCES            ///
	////////////////////////////////////////
	
	/**
	 * Applies the ant influence stored in their bodies, then clear them.
	 */
	private def applyInfluences {
		
		var shuffledUuids = new LinkedList(agentBodies.keySet)
		Collections.shuffle(shuffledUuids)
		for(uuid : shuffledUuids) {
			// Currently, all of our agents are ants, so our influences apply to ants. 
			// If we add other types of agents, the nature of the agent and the influences he can send will have to be determined.
			val antBody = agentBodies.get(uuid) as AntBody
			if(antBody !== null) {
				applyAntInfluence(antBody)
			}
		}

	}
	
	private def applyAntInfluence(ant : AntBody) {
		val influence = agentInfluenceHashMap.get(ant.uuid)
		
		if(influence instanceof DropFoodInfluence) {
			EnvironmentUtils.dropFood(ant, influence.droppedAmount, grid)
		} else if(influence instanceof MeleeAttackInfluence) {
			this.antMeleeAttack(ant, influence.direction)
		} else if(influence instanceof MoveInfluence) {
			EnvironmentUtils.moveAnt(ant, influence.direction, grid)
		} else if (influence instanceof PheromoneAndMoveInfluence) {
			EnvironmentUtils.placePheromone(ant.colony, influence.pheromoneType, influence.pheromoneQty, ant.position, grid)
			EnvironmentUtils.moveAnt(ant, influence.direction, grid)
		} else if (influence instanceof PickFoodInfluence) {
			EnvironmentUtils.pickFood(ant, influence.qty, grid)
		} else if (influence instanceof DoNothingInfluence) {
			// do nothing
		} else {
			error("unrecognized influence : "+influence)
		}
		return
	}
	
	private def antMeleeAttack(body : AntBody, direction : Direction) {
		val target = new Point(body.position.x + direction.x, body.position.y + direction.y)
		// Ensure target position is on map
		if (!grid.containsPosition(target)) {
			return
		}
		
		val targetBody = EnvironmentUtils.getUnburrowedAndAt(target, grid);
		if(targetBody === null) {
			return
		}
		targetBody.attack(body.attackDamage)
		if(targetBody.health <= 0) {
			this.killAgent(targetBody.uuid)
		}
	}
	
	/**
	 * Receive an influenceEvent : that means every agent sent its influence,
	 * and they can now be applied.
	 */
	on InfluenceEvent {
		synchronized(this) {
			applyStep
		}
	}
	
	
	////////////////////////////////////////
	///         SPAWN/KILL AGENTS        ///
	////////////////////////////////////////
	
	private def spawnAnt(colony : Colony, caste : Caste, position : Point) {
		
		// the ant behaviour is passed as a parameters
		var antUuid : UUID = spawn(typeof(AntAgent), behaviourHandler.getStrategicBehaviour(caste), agentInfluenceHashMap)
		var body : AntBody = new AntBody(position, antUuid, colony, caste)
		
		//Add the new body in the proper cell of the grid, and in the agentBodies table
		this.grid.get(position).addEnvObject(body)
		this.agentBodies.put(antUuid, body)
		this.uninitializedAgents.add(antUuid)
		return
	}
	
	private def killAgent(uuid : UUID) {
		var body = agentBodies.get(uuid)
		
		if(!this.grid.get(body.position).removeEnvObject(body)) {
			error("Body not found in grid when killing agent #" + uuid)
		}
		if(this.agentBodies.remove(uuid) === null) {
			error("Body not found in hashmap when killing agent #" + uuid)
		} else if(this.agentInfluenceHashMap.remove(uuid) === null) {
			error("agentInfluence not found in hashmap when killing agent #" + uuid)
		}
		// This is unlikely to happen, but an agent can theoretically be "spawn killed", killed in the same step is was spawned, 
		// hence potentially killed before its initialization was complete.
		if(this.uninitializedAgents.remove(uuid)) {
			warning("Agent #" + uuid + " was killed before it was fully initialized")
		}
		emit(new KillAgentEvent, Scopes.addresses(defaultSpace.getAddress(body.uuid)))
	}
	
	on AgentInitializedEvent {
		synchronized(this) {
			var agentUUID = occurrence.source.UUID	
			
			if(!uninitializedAgents.remove(agentUUID)) {
				error("Agent #" + agentUUID + "said he was just initialized, but we didn't expect him to initialize now")
			}
			//If this is the last agent we were waiting for, we finish the step.
			if(this.waitingAgentsInitialization && this.uninitializedAgents.isEmpty) {
				this.waitingAgentsInitialization = false
				sendPerceptionsToAgents(perceptionGrid)
			}
		}
	}
	
	////////////////////////////////////////
	///            PERCEPTIONS           ///
	////////////////////////////////////////
	
	
	def sendPerceptionsToAgents(perceptionGrid : PerceptionGrid) : void {
		
		//If there is no agent, there is no perception to send, and no influence to wait.
		//We can directly apply the step
		if(this.uninitializedAgents.size > 0) {
			this.waitingAgentsInitialization = true
		} else {
			if(agentBodies.isEmpty) {
			applyStep
			return
			}
			/** The emit function being too slow for our purposes, we workaround
			 * this problem by sending the perceptions of every agent
			 * in a common HashMap that every agent will access, thus using only
			 * 1 emit call for sending perceptions
			 */
			val antPerceptions = new ConcurrentHashMap<UUID, AntPerception>
			for(agentBody : agentBodies.values) {
				if (agentBody instanceof AntBody) {
					val agentPerceptionGrid = perceptionGrid.computeAgentPerception(agentBody)
					val agentPerception = new AntPerception(new PerceivableAnt(agentBody), agentPerceptionGrid)
					antPerceptions.put(agentBody.uuid, agentPerception)
				}
			}
			var evt = new PerceptionEvent(this.defaultAddress, antPerceptions, this.agentBodies.size)
			emit(evt)
		}
		
	}
	
	
	////////////////////////////////////////
	///            WORLD RULES           ///
	////////////////////////////////////////
	
	/** To be called each step. Periodically spawn an ant inside each anthill */
	private def spawnAntsInAntHills {
		for(antHill : this.antHills) {
			antHill.decrementSpawnCooldown;
			if(antHill.spawnCooldown === 0 && antHill.availableFood >= AntHill.SPAWN_COST) {
				antHill.pickFood(AntHill.SPAWN_COST)
				antHill.spawnCooldown = AntHill.SPAWN_COOLDOWN
				this.spawnAnt(antHill.colony, antHill.casteToSpawn, antHill.position)
			}
		}
	}

	/** Simulates ants aging, kill agents that are too old */
	private def antsAging {
		var toKill = new LinkedList<UUID>
		for(body : this.agentBodies.values) {
			if(body instanceof AntBody) {
				body.decrementRemainingLifeTime
				if(body.remainingLifeTime < 0) {
					toKill += body.uuid
				}
			}
		}
		for(uuid : toKill) {
			this.killAgent(uuid)
		}
	}
}