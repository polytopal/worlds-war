package fr.utbm.info.vi51.worldswar.environment

import fr.utbm.info.vi51.worldswar.environment.envobject.AntBody
import fr.utbm.info.vi51.worldswar.environment.envobject.AntHill
import fr.utbm.info.vi51.worldswar.environment.envobject.Food
import fr.utbm.info.vi51.worldswar.environment.perceivable.Perceivable
import fr.utbm.info.vi51.worldswar.environment.perceivable.PerceivableAnt
import fr.utbm.info.vi51.worldswar.environment.perceivable.PerceivableAntHill
import fr.utbm.info.vi51.worldswar.environment.perceivable.PerceivableFood
import fr.utbm.info.vi51.worldswar.simulator.SimulationStepEvent
import fr.utbm.info.vi51.worldswar.simulator.StopSimulationEvent
import fr.utbm.info.vi51.worldswar.utils.Grid
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.List
import fr.utbm.info.vi51.worldswar.environment.envobject.Pheromone
import fr.utbm.info.vi51.worldswar.environment.perceivable.PerceivablePheromone
import fr.utbm.info.vi51.worldswar.environment.envobject.Wall
import fr.utbm.info.vi51.worldswar.environment.perceivable.PerceivableWall

/**
 * While it does not appear obvious, this agent manages the environment.
 * */
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var grid : Grid<Cell>
	
	val width : int = 500
	val height : int = 500
	// X min = Y min = 0
	// X max = width-1
	// Y max = height-1
	
	on Initialize {
		// TODO replace values with actual width and height of the environment
		this.grid = new Grid(0,width-1,0,height-1)
		for(var x = 0; x < width; x++) {
			for(var y = 0; y < height; y++) {
				grid.set(x,y, new Cell)
			}
		}
	}
	
	on SimulationStepEvent {
		println("Simulation step")
		
		var perceptionGrid = computePerceptionGrid
		
		// TODO - send the all grid to the listeners (the gui)
		
		// TODO - compute and send the perception to each agent from the perception grid
		
		emit(new EnvironmentReadyEvent)
	}
	
	
	on StopSimulationEvent {
		//TODO In the future, it should wait for all the spawned agents to terminate
		killMe
	}
	
	on Destroy {
		emit(new EnvironmentTerminatedEvent)
	}
	
	// ----------------
	
	
	def computePerceptionGrid : Grid<List<Perceivable>>{
		var perceptionGrid = new Grid<List<Perceivable>>(0, width-1, 0, height-1)
		
		for(var x = 0; x < width; x++) {
			for(var y = 0; y < height; y++) {
				// foreach cell
				
				var perceptionList : List<Perceivable> = new ArrayList<Perceivable>
				perceptionGrid.set(x,y, perceptionList)
				
				var EnvObjectList = grid.get(x, y).getEnvObjects
				
				// foreach Environment object in the cell
				for(var i:int=0 ; i<EnvObjectList.size ; i++){
					var envObj = EnvObjectList.get(i)
					var perceivable : Perceivable
					
					// we change each envObject in Perceivable
					if(envObj instanceof AntBody){
						perceivable = new PerceivableAnt(envObj)
					}else if(envObj instanceof AntHill){
						perceivable = new PerceivableAntHill(envObj)
					}else if(envObj instanceof Food){
						perceivable = new PerceivableFood(envObj)
					}else if(envObj instanceof Pheromone){
						perceivable = new PerceivablePheromone(envObj)
					}else if(envObj instanceof Wall){
						perceivable = new PerceivableWall(envObj)
					}
					
					if(perceivable !== null){
						perceptionList.add(perceivable)
					}
				}
				
			}
		}
	
		return perceptionGrid;
	}
}