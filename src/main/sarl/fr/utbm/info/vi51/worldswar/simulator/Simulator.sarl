package fr.utbm.info.vi51.worldswar.simulator

import fr.utbm.info.vi51.worldswar.controller.Controller
import fr.utbm.info.vi51.worldswar.controller.ControllerCommandEvent
import fr.utbm.info.vi51.worldswar.controller.NewSimulationCommand
import fr.utbm.info.vi51.worldswar.controller.SimulationParameters
import fr.utbm.info.vi51.worldswar.controller.SimulationSpeedCommand
import fr.utbm.info.vi51.worldswar.controller.StopProgramCommand
import fr.utbm.info.vi51.worldswar.controller.StopSimulationCommand
import fr.utbm.info.vi51.worldswar.environment.Environment
import fr.utbm.info.vi51.worldswar.environment.EnvironmentInitializedEvent
import fr.utbm.info.vi51.worldswar.environment.EnvironmentReadyEvent
import fr.utbm.info.vi51.worldswar.environment.EnvironmentTerminatedEvent
import fr.utbm.info.vi51.worldswar.gui.Window
import io.sarl.core.AgentTask
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.LinkedList
import java.util.List
import fr.utbm.info.vi51.worldswar.controller.PauseSimulationCommand
import fr.utbm.info.vi51.worldswar.controller.ResumeSimulationCommand
import fr.utbm.info.vi51.worldswar.controller.StepSimulationCommand

/**
 * Main agent of the software.
 * Manages the flow of the simulation
 */
agent Simulator {
	uses Schedules, DefaultContextInteractions, Lifecycle, Logging
	
	/** the controller is what allows the simulator to receive events from the gui */
	private var controller : Controller
	private var gui : Window
	
	/** list of listeners of the Simulator, which will receive events from the Simulator */
	private var listeners : List<SimulatorListener>

	/** Simulation speed, as chosen by the user */
	private var simulationSpeed = SimulationSpeed.initialSpeed
	
	/** Indicates whether the step timer has passed, hence a new step should be fired */
	private var stepTimerReady = false
	/** Indicates whether the environment is ready to compute a new step */
	private var environmentReady = false
	/** Indicates whether the environment is spawned and initialized */
	private var environmentExists = false
	
	/** If a new simulation has been requested, contains the parameters of this new simulation. null otherwise. */
	private var pendingSimulationParams : SimulationParameters = null
	
	private var stepTimerTask : AgentTask = null
	

	////////////////////////////////////////
	///          INITIALIZATION          ///
	////////////////////////////////////////
	
	on Initialize {
		synchronized(this) {
			controller = new Controller(defaultSpace)
			gui = new Window(controller)
			
			listeners = new LinkedList
			listeners.add(gui)
		}
	}
	
	
	////////////////////////////////////////
	///          START SIMULATION        ///
	////////////////////////////////////////
	
	/** Spawns a new environment to start a new simulation.
	 * Should NEVER be invoked while an environment is already running.
	 */
	private def newSimulation(params : SimulationParameters) {
		spawn(typeof(Environment), {params}, listeners)
		
		for(l : listeners) {
			l.simulationStarted
		}
	}
	
	/**
	 * The environment has finished its initialization, we can start the simulation loop
	 */
	on EnvironmentInitializedEvent {
		synchronized(this) {
			this.environmentExists = true
			this.environmentReady = true
			this.stepTimerReady = true
			simulationLoop
		}
	}
	
	////////////////////////////////////////
	///     SIMULATION STEP HANDLING     ///
	////////////////////////////////////////
	
	on EnvironmentReadyEvent {
		synchronized(this) {
			this.environmentReady = true
			simulationLoop
		}
	}
	
	private def setStepTimerReady {
		// Called from the scheduler, so needs to be synchronized too
		synchronized(this) {
			this.stepTimerReady = true
			simulationLoop
		}
	}
	
	/** 
	 *	execute the next step in the simulation loop if the environment is ready and enough time
	 * has passed since the last one.
	 */
	private def simulationLoop {
		if(this.stepTimerReady && this.environmentReady) {
			executeStep
			this.stepTimerTask = in(this.simulationSpeed.milliseconds) [ setStepTimerReady ]
		}
	}
	
	
	////////////////////////////////////////
	///     STOP SIMULATION/PROGRAM      ///
	////////////////////////////////////////
	
	/**
	 * Cancels the step timer task and asks agents to stop.
	 */
	private def stopSimulation {
		info("Simulation was requested to stop")
		for(l : listeners) {
			l.simulationTerminated
		}
		cancel(this.stepTimerTask)
		emit(new StopSimulationEvent)
	}
	
	/**
	 * Environment has been successfully destroyed
	 */
	on EnvironmentTerminatedEvent {
		synchronized(this) {
			info("Environment destroyed")
			this.environmentExists = false
			
			// If a new simulation was waiting to start, start it
			if(this.pendingSimulationParams !== null) {
				newSimulation(this.pendingSimulationParams)
				this.pendingSimulationParams = null
			}
		}
	}
	
	private def closeProgram {
		stopSimulation
		info("Killing Simulator")
		killMe
	}
	
	////////////////////////////////////////
	///       CONTROLLER COMMANDS        ///
	////////////////////////////////////////
	
	/**
	 * Handles the controller's commands
	 */
	on ControllerCommandEvent {
		synchronized(this) {
			if(occurrence.command instanceof SimulationSpeedCommand) {
				var command = occurrence.command as SimulationSpeedCommand
				this.simulationSpeed = command.speed
			} else if (occurrence.command instanceof NewSimulationCommand) {
				var command = occurrence.command as NewSimulationCommand
				handleNewSimulationCommand(command.simulationParameters)
			} else if (occurrence.command instanceof StopSimulationCommand) {
				stopSimulation
			} else if (occurrence.command instanceof PauseSimulationCommand) {
				pauseSimulation
			} else if (occurrence.command instanceof ResumeSimulationCommand) {
				resumeSimulation
			} else if (occurrence.command instanceof StepSimulationCommand) {
				stepSimulation
			} else if (occurrence.command instanceof StopProgramCommand) {
				closeProgram
			}
		}
	}
	
	private def handleNewSimulationCommand(params : SimulationParameters) {
		if(this.environmentExists) {
			this.pendingSimulationParams = params
			stopSimulation
		}
		else {
			newSimulation(params)
		}
	}
	
	private def pauseSimulation() {
		cancel(this.stepTimerTask)
		for(l : listeners) {
			l.simulationPaused();
		}
	}
	
	private def resumeSimulation() {
		this.stepTimerTask = in(this.simulationSpeed.milliseconds) [ setStepTimerReady ]
		for(l : listeners) {
			l.simulationResumed();
		}
	}
	
	private def stepSimulation() {
		if(this.environmentReady) {
			executeStep
		}
	}
	private def executeStep() {
		this.environmentReady = false
		this.stepTimerReady = false
		emit(new SimulationStepEvent)
		for(l as SimulatorListener : this.listeners) {
			l.simulationStepFired
		}
	}
}